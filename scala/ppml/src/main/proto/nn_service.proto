//
// Copyright 2021 BigDL Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
syntax = 'proto3';
package nn;
import "fl_base.proto";
//option java_multiple_files = true;
option java_package = "com.intel.analytics.bigdl.ppml.fl.generated";
option java_outer_classname = "NNServiceProto";

service NNService {
    rpc train(TrainRequest) returns (TrainResponse) {}
    rpc evaluate(EvaluateRequest) returns (EvaluateResponse) {}
    rpc predict(PredictRequest) returns (PredictResponse) {}
    rpc upload_meta(UploadMetaRequest) returns (UploadMetaResponse) {}
    rpc upload_file(stream ByteChunk) returns (UploadMetaResponse) {}
    rpc save_server_model(SaveModelRequest) returns (SaveModelResponse) {}
    rpc load_server_model(LoadModelRequest) returns (LoadModelResponse) {}
}

message TrainRequest {
    string clientuuid = 1;
    TensorMap data = 2;
    string algorithm = 3;
}
message TrainResponse {
    string response = 1;
    TensorMap data = 2;
    int32 code = 3;
}

message EvaluateRequest {
    string clientuuid = 1;
    TensorMap data = 2;
    string algorithm = 3;
    bool return = 4;
}
message EvaluateResponse {
    string response = 1;
    TensorMap data = 2;
    int32 code = 3;
    string message = 4;
}

message PredictRequest {
    string clientuuid = 1;
    TensorMap data = 2;
    string algorithm = 3;
}
message PredictResponse {
    string response = 1;
    TensorMap data = 2;
    int32 code = 3;
}
message UploadMetaRequest {
    string client_uuid = 1;
    bytes loss_fn = 2;
    ClassAndArgs optimizer = 3;
    string aggregator = 4;
}

message ByteChunk {
    bytes buffer = 1;
}

message ClassAndArgs {
    bytes cls = 1;
    bytes args = 2;
}
message UploadMetaResponse {
    string message = 1;
}

message LoadModelRequest {
    string client_id = 1;
    string backend = 2;
    string model_path = 3;
}

message LoadModelResponse {
    string message = 1;
}

message SaveModelRequest {
    string client_id = 1;
    string backend = 2;
    string model_path = 3;    
}
message SaveModelResponse  {
    string message = 1;
}
