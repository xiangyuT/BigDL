# pccs Service
apiVersion: v1
kind: Service
metadata:
  name: pccs
  namespace: bigdl-pccs-ehsm-kms
  labels:
    app: pccs
spec:
  type: ClusterIP
  ports:
    - name: pccs
      port: 18081
      targetPort: 18081
  selector:
    app: pccs
  externalIPs:
  - {{ .Values.pccsIP }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pccs
  namespace: bigdl-pccs-ehsm-kms
spec:
  selector:
    matchLabels:
      app: pccs
  serviceName: "pccs"
  replicas: 1
  template:
    metadata:
      labels:
        app: pccs
    spec:
      containers:
      - name: pccs
        image: {{ .Values.pccsImageName }}
        imagePullPolicy: IfNotPresent
        env:
        - name: API_KEY
          value: {{ .Values.apiKey }}
        - name: PCCS_PORT
          value: "18081"
        - name: HTTPS_PROXY_URL
          value: {{ .Values.httpsProxyUrl }}
        - name: COUNTRY_NAME
          value: {{ .Values.countryName }}
        - name: CITY_NAME
          value: {{ .Values.cityName }}
        - name: ORGANIZATION_NAME
          value: {{ .Values.organizaitonName }}
        - name: COMMON_NAME
          value: {{ .Values.commonName }}
        - name: EMAIL_ADDRESS
          value: {{ .Values.emailAddress }}
        - name: PASSWORD
          value: {{ .Values.serverPassword }}
        ports:
        - containerPort: 18081
          name: pccs-port
---
# bigdl-pccs-ehsm-kms Secret
apiVersion: v1
kind: Secret
metadata:
    name: ehsm-secret
    namespace: bigdl-pccs-ehsm-kms
type: Opaque
data:
    couch_root_username: {{ .Values.couchdbRootUsername }}
    couch_root_password: {{ .Values.couchdbRootPassword }}
---
# bigdl-pccs-ehsm-kms ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: dkeyserver-configmap
  namespace: bigdl-pccs-ehsm-kms
data:
  pccs_url: "https://{{ .Values.pccsIP }}:18081"
  dkeyserver_service_url: "https://{{ .Values.dkeyserverIP }}:8888"

---
# bigdl-pccs-ehsm-kms dkeyserver
apiVersion: v1
kind: Service
metadata:
  name: dkeyserver
  namespace: bigdl-pccs-ehsm-kms
  labels:
    app: dkeyserver
spec:
  type: ClusterIP
  ports:
    - name: dkeyserver
      port: 8888
      targetPort: 8888
  selector:
    app: dkeyserver
  externalIPs:
  - {{ .Values.dkeyserverIP }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: dkeyserver
  namespace: bigdl-pccs-ehsm-kms
spec:
  selector:
    matchLabels:
      app: dkeyserver
  serviceName: "dkeyserver"
  replicas: 1
  template:
    metadata:
      labels:
        app: dkeyserver
    spec:
      volumes:
      - name: dev-enclave
        hostPath:
          path: /dev/sgx/enclave
      - name: dev-provision
        hostPath:
          path: /dev/sgx/provision
      - name: dev-aesmd
        hostPath:
          path: /var/run/aesmd
      containers:
      - name: dkeyserver
        image: {{ .Values.dkeyserverImageName }}
        imagePullPolicy: IfNotPresent
        command: ['sh' , '-c','if [ -c "/dev/sgx/enclave" ]; then echo "/dev/sgx/enclave is ready";elif [ -c "/dev/sgx_enclave" ]; then echo "/dev/sgx/enclave not ready, try to link to /dev/sgx_enclave"; mkdir -p /dev/sgx; ln -s /dev/sgx_enclave /dev/sgx/enclave; else echo "both /dev/sgx/enclave /dev/sgx_enclave are not ready, please check the kernel and driver";fi; if [ -c "/dev/sgx/provision" ]; then echo "/dev/sgx/provision is ready";elif [ -c "/dev/sgx_provision" ]; then echo "/dev/sgx/provision not ready, try to link to /dev/sgx_provision";mkdir -p /dev/sgx;ln -s /dev/sgx_provision /dev/sgx/provision;else echo "both /dev/sgx/provision /dev/sgx_provision are not ready, please check the kernel and driver";fi;sleep 30; curl -v -k -G -w "%{http_code}" "http://{{ .Values.pccsIP }}:18081/sgx/certification/v3/rootcacrl";  bash /home/start_dkeyserver.sh']
        volumeMounts:
        - mountPath: /dev/sgx/enclave
          name: dev-enclave
        - mountPath: /dev/sgx/provision
          name: dev-provision
        - mountPath: /var/run/aesmd
          name: dev-aesmd
        env:
        - name: PCCS_URL
          valueFrom:
            configMapKeyRef:
              name: dkeyserver-configmap
              key: pccs_url
        ports:
        - containerPort: 8888
          name: dkeyserver-port
---
# bigdl-pccs-ehsm-kms ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: ehsm-configmap
  namespace: bigdl-pccs-ehsm-kms
data:
  database_url: "couchdb-0.couchdb"
  database_port: "5984"
  database_name: "ehsm_kms_db"
  dkeyserver_ip: "{{ .Values.dkeyserverIP }}"
  dkeyserver_port: "8888"
  pccs_url: "https://{{ .Values.pccsIP }}:18081"

---
# bigdl-pccs-ehsm-kms PersistentVolume for CouchDB
apiVersion: v1
kind: PersistentVolume 
metadata:
  name: ehsm-pv-nfs
spec:
  capacity:
    storage: 10Gi 
  accessModes:
    - ReadWriteOnce 
  persistentVolumeReclaimPolicy: Retain 
  storageClassName: nfs
  nfs:
    path: {{ .Values.nfsPath }}
    server: {{ .Values.nfsServerIp }}

---
# bigdl-pccs-ehsm-kms CouchDB
apiVersion: v1
kind: Service
metadata:
  name: couchdb
  namespace: bigdl-pccs-ehsm-kms
  labels:
    app: couchdb
spec:
  type: ClusterIP
  ports:
    - name: couchdb
      port: 5984
      targetPort: 5984
  selector:
    app: couchdb
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: couchdb
  namespace: bigdl-pccs-ehsm-kms
spec:
  selector:
    matchLabels:
      app: couchdb
  serviceName: "couchdb"
  replicas: 1
  template:
    metadata:
      labels:
        app: couchdb
    spec:
      containers:
      - name: couchdb
        image: {{ .Values.couchdbImageName }}
        imagePullPolicy: IfNotPresent
        readinessProbe:
          httpGet:
            port: couchdb-port
            path: /
          initialDelaySeconds: 5
          periodSeconds: 10
        ports: 
        - containerPort: 5984
          name: couchdb-port
        volumeMounts:
        - name: couch-persistent-storage
          mountPath: /opt/couchdb/data
        env:
          - name: COUCHDB_USER
            valueFrom:
              secretKeyRef:
                name: ehsm-secret
                key: couch_root_username
          - name: COUCHDB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ehsm-secret
                key: couch_root_password
  volumeClaimTemplates:
  - metadata:
      name: couch-persistent-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "nfs"
      resources:
        requests:
          storage: 10Gi

---
# dkey cache          
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dkeycache
  namespace: bigdl-pccs-ehsm-kms
spec:
  replicas: 1
  selector:
    matchLabels:
      name: dkeycache
  template:
    metadata:
      labels:
        name: dkeycache
    spec:
      volumes:
      - name: dev-enclave
        hostPath:
          path: /dev/sgx/enclave
      - name: dev-provision
        hostPath:
          path: /dev/sgx/provision
      - name: dev-aesmd
        hostPath:
          path: /var/run/aesmd
      - name: dev-dkeyprovision
        hostPath:
          path: /var/run/ehsm
      containers:
      - name: dkeycache
        image: {{ .Values.dkeycacheImageName }}
        command: ['sh' , '-c','if [ -c "/dev/sgx/enclave" ]; then echo "/dev/sgx/enclave is ready";elif [ -c "/dev/sgx_enclave" ]; then echo "/dev/sgx/enclave not ready, try to link to /dev/sgx_enclave"; mkdir -p /dev/sgx; ln -s /dev/sgx_enclave /dev/sgx/enclave; else echo "both /dev/sgx/enclave /dev/sgx_enclave are not ready, please check the kernel and driver";fi; if [ -c "/dev/sgx/provision" ]; then echo "/dev/sgx/provision is ready";elif [ -c "/dev/sgx_provision" ]; then echo "/dev/sgx/provision not ready, try to link to /dev/sgx_provision";mkdir -p /dev/sgx;ln -s /dev/sgx_provision /dev/sgx/provision;else echo "both /dev/sgx/provision /dev/sgx_provision are not ready, please check the kernel and driver";fi;sleep 60; bash /home/start_dkeycache.sh;']
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /dev/sgx/enclave
          name: dev-enclave
        - mountPath: /dev/sgx/provision
          name: dev-provision
        - mountPath: /var/run/aesmd
          name: dev-aesmd
        - mountPath: /var/run/ehsm
          name: dev-dkeyprovision
        env:
        - name: PCCS_URL 
          valueFrom:
            configMapKeyRef:
              name: ehsm-configmap
              key: pccs_url
        - name: DKEYSERVER_IP
          valueFrom:
            configMapKeyRef:
              name: ehsm-configmap
              key: dkeyserver_ip
        - name: DKEYSERVER_PORT
          valueFrom:
            configMapKeyRef:
              name: ehsm-configmap
              key: dkeyserver_port

---
# bigdl-pccs-ehsm-kms service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bigdl-pccs-ehsm-kms-deployment
  namespace: bigdl-pccs-ehsm-kms
spec:
  replicas: 1
  selector:
    matchLabels:
      app: bigdl-pccs-ehsm-kms
  template:
    metadata:
      labels:
        app: bigdl-pccs-ehsm-kms
    spec:
      volumes:
      - name: dev-enclave
        hostPath:
          path: /dev/sgx/enclave
      - name: dev-provision
        hostPath:
          path: /dev/sgx/provision
      - name: dev-aesmd
        hostPath:
          path: /var/run/aesmd
      - name: dev-dkeyprovision
        hostPath:
          path: /var/run/ehsm
      initContainers:
      - name: init-bigdl-pccs-ehsm-kms
        image: {{ .Values.ehsmKmsImageName }}
        imagePullPolicy: IfNotPresent
        command: ['sh' , '-c','if [ -c "/dev/sgx/enclave" ]; then echo "/dev/sgx/enclave is ready";elif [ -c "/dev/sgx_enclave" ]; then echo "/dev/sgx/enclave not ready, try to link to /dev/sgx_enclave"; mkdir -p /dev/sgx; ln -s /dev/sgx_enclave /dev/sgx/enclave; else echo "both /dev/sgx/enclave /dev/sgx_enclave are not ready, please check the kernel and driver";fi; if [ -c "/dev/sgx/provision" ]; then echo "/dev/sgx/provision is ready";elif [ -c "/dev/sgx_provision" ]; then echo "/dev/sgx/provision not ready, try to link to /dev/sgx_provision";mkdir -p /dev/sgx;ln -s /dev/sgx_provision /dev/sgx/provision;else echo "both /dev/sgx/provision /dev/sgx_provision are not ready, please check the kernel and driver";fi;until curl http://${EHSM_CONFIG_COUCHDB_SERVER}:${EHSM_CONFIG_COUCHDB_PORT}/; do echo waiting for couchDB; sleep 20; done;echo "waiting for dkeycache...";sleep 60;']
        env:
        - name: EHSM_CONFIG_COUCHDB_SERVER
          valueFrom:
            configMapKeyRef:
              name: ehsm-configmap
              key: database_url
        - name: EHSM_CONFIG_COUCHDB_PORT
          valueFrom:
            configMapKeyRef:
              name: ehsm-configmap
              key: database_port
      containers:
      - name: bigdl-pccs-ehsm-kms
        # You need to tag the bigdl-pccs-ehsm-kms container image with this name on each worker node or change it to point to a docker hub to get the container image.
        image: {{ .Values.ehsmKmsImageName }}
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /dev/sgx/enclave
          name: dev-enclave
        - mountPath: /dev/sgx/provision
          name: dev-provision
        - mountPath: /var/run/aesmd
          name: dev-aesmd
        - mountPath: /var/run/ehsm
          name: dev-dkeyprovision
        env:
        - name: PCCS_URL 
          valueFrom:
            configMapKeyRef:
              name: ehsm-configmap
              key: pccs_url
        - name: EHSM_CONFIG_COUCHDB_USERNAME
          valueFrom:
            secretKeyRef:
              name: ehsm-secret
              key: couch_root_username
        - name: EHSM_CONFIG_COUCHDB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ehsm-secret
              key: couch_root_password
        - name: EHSM_CONFIG_COUCHDB_SERVER
          valueFrom:
            configMapKeyRef:
              name: ehsm-configmap
              key: database_url
        - name: EHSM_CONFIG_COUCHDB_PORT
          valueFrom:
            configMapKeyRef:
              name: ehsm-configmap
              key: database_port
        - name: EHSM_CONFIG_COUCHDB_DB
          valueFrom:
            configMapKeyRef:
              name: ehsm-configmap
              key: database_name
        ports:
        - name: ehsm-kms
          containerPort: 9000
---
apiVersion: v1
kind: Service
metadata:
  name: bigdl-pccs-ehsm-kms-service
  namespace: bigdl-pccs-ehsm-kms
spec:
  type: LoadBalancer
  selector:
    app: bigdl-pccs-ehsm-kms
  ports:
    - name: bigdl-pccs-ehsm-kms
      protocol: TCP
      # This port is ehsm_kms_service access port,you can change it to what you want.
      port: 9000
      targetPort: 9000
      nodePort: 30000
  sessionAffinity: ClientIP
  externalIPs:
  - {{ .Values.kmsIP }}
